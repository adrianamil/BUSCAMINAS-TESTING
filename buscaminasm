import pygame
import sys
import random

# -------- CONFIG --------
CELL_SIZE = 32
MARGIN = 2
FONT_NAME = "segoeui"

# -------- COLORES --------
BG_COLOR = (245, 245, 245)
HEADER_COLOR = (30, 144, 255)
TEXT_COLOR = (255, 255, 255)
CELL_COLOR = (200, 200, 200)
CELL_BORDER = (100, 100, 100)
REVEALED_COLOR = (230, 230, 230)
FLAG_COLOR = (255, 0, 0)

# -------- FUNCIONES DE JUEGO --------
class Buscaminas:
    def __init__(self, filas, columnas, minas):
        self.filas = filas
        self.columnas = columnas
        self.minas_total = minas
        self.reiniciar()

    def reiniciar(self):
        self.tablero = [[0 for _ in range(self.columnas)] for _ in range(self.filas)]
        self.reveladas = [[False]*self.columnas for _ in range(self.filas)]
        self.banderas = [[False]*self.columnas for _ in range(self.filas)]
        self.juego_terminado = False
        self.ganaste = False
        self.minas_restantes = self.minas_total

        minas_colocadas = 0
        while minas_colocadas < self.minas_total:
            f = random.randint(0, self.filas-1)
            c = random.randint(0, self.columnas-1)
            if self.tablero[f][c] != 'M':
                self.tablero[f][c] = 'M'
                minas_colocadas += 1

        for f in range(self.filas):
            for c in range(self.columnas):
                if self.tablero[f][c] == 'M':
                    continue
                count = 0
                for i in range(-1, 2):
                    for j in range(-1, 2):
                        nf, nc = f+i, c+j
                        if 0 <= nf < self.filas and 0 <= nc < self.columnas:
                            if self.tablero[nf][nc] == 'M':
                                count += 1
                self.tablero[f][c] = count

    def revelar(self, f, c):
        if self.juego_terminado or self.banderas[f][c] or self.reveladas[f][c]:
            return
        self.reveladas[f][c] = True
        if self.tablero[f][c] == 'M':
            self.juego_terminado = True
            return
        if self.tablero[f][c] == 0:
            for i in range(-1, 2):
                for j in range(-1, 2):
                    nf, nc = f+i, c+j
                    if 0 <= nf < self.filas and 0 <= nc < self.columnas:
                        self.revelar(nf, nc)
        self.verificar_victoria()

    def verificar_victoria(self):
        for f in range(self.filas):
            for c in range(self.columnas):
                if self.tablero[f][c] != 'M' and not self.reveladas[f][c]:
                    return
        self.juego_terminado = True
        self.ganaste = True

    def marcar_bandera(self, f, c):
        if self.reveladas[f][c] or self.juego_terminado:
            return
        self.banderas[f][c] = not self.banderas[f][c]
        self.minas_restantes += -1 if self.banderas[f][c] else 1

# -------- DIBUJAR --------
def dibujar_tablero(screen, juego, fuente, ancho, alto):
    screen.fill(BG_COLOR)
    pygame.draw.rect(screen, HEADER_COLOR, (0, 0, ancho, 50))
    texto = fuente.render(f"ðŸ’£ Minas restantes: {juego.minas_restantes}", True, TEXT_COLOR)
    screen.blit(texto, (ancho//2 - texto.get_width()//2, 10))

    for f in range(juego.filas):
        for c in range(juego.columnas):
            x = c * (CELL_SIZE + MARGIN) + MARGIN
            y = f * (CELL_SIZE + MARGIN) + 50 + MARGIN
            rect = pygame.Rect(x, y, CELL_SIZE, CELL_SIZE)

            if juego.reveladas[f][c]:
                pygame.draw.rect(screen, REVEALED_COLOR, rect)
                pygame.draw.rect(screen, CELL_BORDER, rect, 1)
                valor = juego.tablero[f][c]
                if valor != 0:
                    num = fuente.render(str(valor), True, (0, 0, 0))
                    screen.blit(num, (x + 10, y + 5))
            elif juego.banderas[f][c]:
                pygame.draw.rect(screen, CELL_COLOR, rect)
                pygame.draw.rect(screen, CELL_BORDER, rect, 1)
                bandera = fuente.render("ðŸš©", True, FLAG_COLOR)
                screen.blit(bandera, (x + 4, y + 2))
            else:
                pygame.draw.rect(screen, CELL_COLOR, rect)
                pygame.draw.rect(screen, CELL_BORDER, rect, 2)

    if juego.juego_terminado:
        msg = "Â¡Ganaste! ðŸŽ‰" if juego.ganaste else "ðŸ’¥ Perdiste"
        texto = fuente.render(msg, True, (255, 0, 0))
        screen.blit(texto, (ancho//2 - texto.get_width()//2, alto - 40))

    pygame.display.flip()

# -------- MENÃš --------
def mostrar_menu():
    pygame.init()
    screen = pygame.display.set_mode((400, 400))
    pygame.display.set_caption("Selecciona dificultad")
    fuente = pygame.font.SysFont(FONT_NAME, 24)
    opciones = [("ðŸŸ£ Papita (6x6)", 6, 6, 5),
                ("ðŸŸ¢ FÃ¡cil (10x10)", 10, 10, 15),
                ("ðŸŸ¡ Medio (18x18)", 18, 18, 40),
                ("ðŸ”´ DifÃ­cil (25x25)", 25, 25, 99)]
    botones = []
    for i, (txt, f, c, m) in enumerate(opciones):
        rect = pygame.Rect(60, 80 + i*70, 280, 50)
        botones.append((rect, txt, (f, c, m)))

    while True:
        screen.fill((255, 255, 255))
        titulo = fuente.render("Selecciona la dificultad", True, (0, 0, 0))
        screen.blit(titulo, (200 - titulo.get_width()//2, 30))

        for rect, txt, _ in botones:
            pygame.draw.rect(screen, (200, 220, 255), rect, border_radius=10)
            label = fuente.render(txt, True, (0, 0, 0))
            screen.blit(label, (rect.x + 10, rect.y + 12))

        pygame.display.flip()
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            elif event.type == pygame.MOUSEBUTTONDOWN and event.button == 1:
                for rect, _, config in botones:
                    if rect.collidepoint(event.pos):
                        return config

# -------- MAIN --------
def main():
    filas, columnas, minas = mostrar_menu()
    ancho = columnas * (CELL_SIZE + MARGIN) + MARGIN
    alto = filas * (CELL_SIZE + MARGIN) + 50 + 60

    screen = pygame.display.set_mode((ancho, alto))
    pygame.display.set_caption("Buscaminas")
    fuente = pygame.font.SysFont(FONT_NAME, 24)
    juego = Buscaminas(filas, columnas, minas)

    while True:
        dibujar_tablero(screen, juego, fuente, ancho, alto)
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            elif event.type == pygame.MOUSEBUTTONDOWN and not juego.juego_terminado:
                x, y = event.pos
                if y > 50:
                    f = (y - 50) // (CELL_SIZE + MARGIN)
                    c = x // (CELL_SIZE + MARGIN)
                    if 0 <= f < filas and 0 <= c < columnas:
                        if event.button == 1:
                            juego.revelar(f, c)
                        elif event.button == 3:
                            juego.marcar_bandera(f, c)

if __name__ == "__main__":
    main()
