import tkinter as tk
import random

class Buscaminas:
    def _init_(self, root, filas, columnas, num_minas):
        """
        Inicializa el juego Buscaminas con un tablero del tamaÃ±o dado y minas.
        """
        self.root = root
        self.filas = filas
        self.columnas = columnas
        self.num_minas = num_minas
        self.tablero = []  # ContendrÃ¡ los valores del juego (nÃºmeros o 'M')
        self.botones = []  # Botones en la interfaz
        self.estado_juego = "jugando"  # Estados: jugando, perdido, ganado
        self.casillas_reveladas = 0
        self.casillas_marcadas = 0
        self.bandera = 'F'  # SÃ­mbolo para marcar posibles minas

        self.generar_tablero()
        self.crear_interfaz()

    def generar_tablero(self):
        """
        Genera un tablero con minas y nÃºmeros que indican la cantidad de minas adyacentes.
        """
        self.tablero = [[0 for _ in range(self.columnas)] for _ in range(self.filas)]

        # Colocar minas en posiciones aleatorias
        minas_colocadas = 0
        while minas_colocadas < self.num_minas:
            fila = random.randint(0, self.filas - 1)
            columna = random.randint(0, self.columnas - 1)
            if self.tablero[fila][columna] != 'M':
                self.tablero[fila][columna] = 'M'
                minas_colocadas += 1

        # Calcular nÃºmeros de minas adyacentes
        for fila in range(self.filas):
            for col in range(self.columnas):
                if self.tablero[fila][col] == 'M':
                    continue
                for i in range(-1, 2):
                    for j in range(-1, 2):
                        if 0 <= fila + i < self.filas and 0 <= col + j < self.columnas:
                            if self.tablero[fila + i][col + j] == 'M':
                                self.tablero[fila][col] += 1

    def crear_interfaz(self):
        """
        Crea la cuadrÃ­cula de botones en pantalla y una etiqueta de estado del juego.
        """
        for fila in range(self.filas):
            fila_botones = []
            for columna in range(self.columnas):
                boton = tk.Button(self.root, width=3, height=1,
                                  command=lambda f=fila, c=columna: self.abrir_celda(f, c))
                boton.grid(row=fila, column=columna)
                boton.bind("<Button-3>", lambda event, f=fila, c=columna: self.marcar_bandera(f, c))
                fila_botones.append(boton)
            self.botones.append(fila_botones)

        # Etiqueta inferior para mensajes de estado
        self.estado = tk.Label(self.root, text="Â¡Juega Buscaminas!", font=("Arial", 14))
        self.estado.grid(row=self.filas, columnspan=self.columnas)

    def abrir_celda(self, fila, columna):
        """
        LÃ³gica al hacer clic izquierdo en una celda. Revela el contenido.
        """
        if self.estado_juego != "jugando":
            return

        boton = self.botones[fila][columna]
        if boton['state'] == "disabled" or boton['text'] == self.bandera:
            return

        if self.tablero[fila][columna] == 'M':
            self.mostrar_minas()
            boton.config(text='M', bg="red")
            self.estado.config(text="Â¡Perdiste! Has tocado una mina.")
            self.estado_juego = "perdido"
        else:
            self.revelar(fila, columna)
            if self.casillas_reveladas == (self.filas * self.columnas - self.num_minas):
                self.estado.config(text="Â¡Felicidades! Has ganado.")
                self.estado_juego = "ganado"
                self.finalizar_juego()

    def revelar(self, fila, columna):
        """
        Revela recursivamente las celdas vacÃ­as y detiene si encuentra nÃºmero.
        """
        if not (0 <= fila < self.filas and 0 <= columna < self.columnas):
            return

        boton = self.botones[fila][columna]
        if boton['state'] == "disabled" or boton['text'] == self.bandera:
            return

        valor = self.tablero[fila][columna]
        boton.config(text=str(valor) if valor > 0 else "", state="disabled", relief=tk.SUNKEN)
        self.casillas_reveladas += 1

        if valor == 0:
            for i in range(-1, 2):
                for j in range(-1, 2):
                    if i != 0 or j != 0:
                        self.revelar(fila + i, columna + j)

    def mostrar_minas(self):
        """
        Muestra todas las minas del tablero (al perder).
        """
        for fila in range(self.filas):
            for col in range(self.columnas):
                if self.tablero[fila][col] == 'M':
                    self.botones[fila][col].config(text='M', bg="red")

    def marcar_bandera(self, fila, columna):
        """
        Coloca o quita una bandera con clic derecho.
        """
        if self.estado_juego != "jugando":
            return
        boton = self.botones[fila][columna]
        if boton['state'] == "disabled":
            return
        if boton['text'] == self.bandera:
            boton.config(text="")
            self.casillas_marcadas -= 1
        else:
            boton.config(text=self.bandera)
            self.casillas_marcadas += 1

    def finalizar_juego(self):
        """
        Deshabilita todas las celdas una vez termina el juego.
        """
        for fila in range(self.filas):
            for col in range(self.columnas):
                self.botones[fila][col].config(state="disabled")


# ------------------------
# MenÃº de dificultad
# ------------------------

def iniciar_juego(dificultad):
    """
    Cierra el menÃº e inicia el juego con el nivel seleccionado.
    """
    menu.destroy()
    if dificultad == "papita":
        filas, columnas, minas = 6, 6, 5
    elif dificultad == "facil":
        filas, columnas, minas = 10, 10, 15
    elif dificultad == "medio":
        filas, columnas, minas = 18, 18, 40
    else:  # dificil
        filas, columnas, minas = 25, 25, 99

    root = tk.Tk()
    root.title("Buscaminas")
    Buscaminas(root, filas, columnas, minas)
    root.mainloop()

# Crear ventana de menÃº
menu = tk.Tk()
menu.title("Selecciona la dificultad")
tk.Label(menu, text="Selecciona el nivel de dificultad", font=("Arial", 14)).pack(pady=10)

# Botones de dificultad
tk.Button(menu, text="ðŸŸ£ Papita (6x6)", command=lambda: iniciar_juego("papita"), width=20).pack(pady=5)
tk.Button(menu, text="ðŸŸ¢ FÃ¡cil (10x10)", command=lambda: iniciar_juego("facil"), width=20).pack(pady=5)
tk.Button(menu, text="ðŸŸ¡ Medio (18x18)", command=lambda: iniciar_juego("medio"), width=20).pack(pady=5)
tk.Button(menu, text="ðŸ”´ DifÃ­cil (25x25)", command=lambda: iniciar_juego("dificil"), width=20).pack(pady=5)

menu.mainloop()
